
Client_Serializtion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003068  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003174  08003174  00004174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b4  080031b4  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  080031b4  080031b4  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031b4  080031b4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031b4  080031b4  000041b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031b8  080031b8  000041b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080031bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000068  08003224  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08003224  00005264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa97  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002112  00000000  00000000  0000fb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00011c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077b  00000000  00000000  00012618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c6e  00000000  00000000  00012d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bebd  00000000  00000000  00014a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088a3e  00000000  00000000  000208be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a92fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002654  00000000  00000000  000a9340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ab994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800315c 	.word	0x0800315c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800315c 	.word	0x0800315c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb28 	bl	80007a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80c 	bl	8000170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f944 	bl	80003e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f866 	bl	800022c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f8ec 	bl	800033c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000164:	f000 f914 	bl	8000390 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000168:	f000 f89e 	bl	80002a8 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800016c:	bf00      	nop
 800016e:	e7fd      	b.n	800016c <main+0x20>

08000170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b094      	sub	sp, #80	@ 0x50
 8000174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000176:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800017a:	2228      	movs	r2, #40	@ 0x28
 800017c:	2100      	movs	r1, #0
 800017e:	4618      	mov	r0, r3
 8000180:	f002 ffc0 	bl	8003104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000184:	f107 0314 	add.w	r3, r7, #20
 8000188:	2200      	movs	r2, #0
 800018a:	601a      	str	r2, [r3, #0]
 800018c:	605a      	str	r2, [r3, #4]
 800018e:	609a      	str	r2, [r3, #8]
 8000190:	60da      	str	r2, [r3, #12]
 8000192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000194:	1d3b      	adds	r3, r7, #4
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	605a      	str	r2, [r3, #4]
 800019c:	609a      	str	r2, [r3, #8]
 800019e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a0:	2301      	movs	r3, #1
 80001a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001aa:	2300      	movs	r3, #0
 80001ac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ae:	2301      	movs	r3, #1
 80001b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b2:	2302      	movs	r3, #2
 80001b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001bc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001c6:	4618      	mov	r0, r3
 80001c8:	f001 f8c8 	bl	800135c <HAL_RCC_OscConfig>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001d2:	f000 f961 	bl	8000498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d6:	230f      	movs	r3, #15
 80001d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001da:	2302      	movs	r3, #2
 80001dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ec:	f107 0314 	add.w	r3, r7, #20
 80001f0:	2102      	movs	r1, #2
 80001f2:	4618      	mov	r0, r3
 80001f4:	f001 fb34 	bl	8001860 <HAL_RCC_ClockConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80001fe:	f000 f94b 	bl	8000498 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000202:	2303      	movs	r3, #3
 8000204:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 8000206:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800020a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800020c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000210:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f001 fcb1 	bl	8001b7c <HAL_RCCEx_PeriphCLKConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000220:	f000 f93a 	bl	8000498 <Error_Handler>
  }
}
 8000224:	bf00      	nop
 8000226:	3750      	adds	r7, #80	@ 0x50
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800023c:	4b18      	ldr	r3, [pc, #96]	@ (80002a0 <MX_ADC1_Init+0x74>)
 800023e:	4a19      	ldr	r2, [pc, #100]	@ (80002a4 <MX_ADC1_Init+0x78>)
 8000240:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000242:	4b17      	ldr	r3, [pc, #92]	@ (80002a0 <MX_ADC1_Init+0x74>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000248:	4b15      	ldr	r3, [pc, #84]	@ (80002a0 <MX_ADC1_Init+0x74>)
 800024a:	2200      	movs	r2, #0
 800024c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800024e:	4b14      	ldr	r3, [pc, #80]	@ (80002a0 <MX_ADC1_Init+0x74>)
 8000250:	2200      	movs	r2, #0
 8000252:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000254:	4b12      	ldr	r3, [pc, #72]	@ (80002a0 <MX_ADC1_Init+0x74>)
 8000256:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800025a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800025c:	4b10      	ldr	r3, [pc, #64]	@ (80002a0 <MX_ADC1_Init+0x74>)
 800025e:	2200      	movs	r2, #0
 8000260:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000262:	4b0f      	ldr	r3, [pc, #60]	@ (80002a0 <MX_ADC1_Init+0x74>)
 8000264:	2201      	movs	r2, #1
 8000266:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000268:	480d      	ldr	r0, [pc, #52]	@ (80002a0 <MX_ADC1_Init+0x74>)
 800026a:	f000 fafd 	bl	8000868 <HAL_ADC_Init>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000274:	f000 f910 	bl	8000498 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000278:	2300      	movs	r3, #0
 800027a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800027c:	2301      	movs	r3, #1
 800027e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	4619      	mov	r1, r3
 8000288:	4805      	ldr	r0, [pc, #20]	@ (80002a0 <MX_ADC1_Init+0x74>)
 800028a:	f000 fbc5 	bl	8000a18 <HAL_ADC_ConfigChannel>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000294:	f000 f900 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000298:	bf00      	nop
 800029a:	3710      	adds	r7, #16
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000084 	.word	0x20000084
 80002a4:	40012400 	.word	0x40012400

080002a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2100      	movs	r1, #0
 80002b2:	460a      	mov	r2, r1
 80002b4:	801a      	strh	r2, [r3, #0]
 80002b6:	460a      	mov	r2, r1
 80002b8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80002ba:	2300      	movs	r3, #0
 80002bc:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80002be:	4b1d      	ldr	r3, [pc, #116]	@ (8000334 <MX_RTC_Init+0x8c>)
 80002c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000338 <MX_RTC_Init+0x90>)
 80002c2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80002c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000334 <MX_RTC_Init+0x8c>)
 80002c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80002ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80002cc:	4b19      	ldr	r3, [pc, #100]	@ (8000334 <MX_RTC_Init+0x8c>)
 80002ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002d2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002d4:	4817      	ldr	r0, [pc, #92]	@ (8000334 <MX_RTC_Init+0x8c>)
 80002d6:	f001 fdbd 	bl	8001e54 <HAL_RTC_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80002e0:	f000 f8da 	bl	8000498 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2201      	movs	r2, #1
 80002f4:	4619      	mov	r1, r3
 80002f6:	480f      	ldr	r0, [pc, #60]	@ (8000334 <MX_RTC_Init+0x8c>)
 80002f8:	f001 fe38 	bl	8001f6c <HAL_RTC_SetTime>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000302:	f000 f8c9 	bl	8000498 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000306:	2301      	movs	r3, #1
 8000308:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800030a:	2301      	movs	r3, #1
 800030c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800030e:	2301      	movs	r3, #1
 8000310:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000312:	2300      	movs	r3, #0
 8000314:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000316:	463b      	mov	r3, r7
 8000318:	2201      	movs	r2, #1
 800031a:	4619      	mov	r1, r3
 800031c:	4805      	ldr	r0, [pc, #20]	@ (8000334 <MX_RTC_Init+0x8c>)
 800031e:	f001 febd 	bl	800209c <HAL_RTC_SetDate>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000328:	f000 f8b6 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	200000b4 	.word	0x200000b4
 8000338:	40002800 	.word	0x40002800

0800033c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000340:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000342:	4a12      	ldr	r2, [pc, #72]	@ (800038c <MX_USART1_UART_Init+0x50>)
 8000344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000348:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800034c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000362:	220c      	movs	r2, #12
 8000364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <MX_USART1_UART_Init+0x4c>)
 8000374:	f002 f8f2 	bl	800255c <HAL_UART_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800037e:	f000 f88b 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	200000c8 	.word	0x200000c8
 800038c:	40013800 	.word	0x40013800

08000390 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000394:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 8000396:	4a12      	ldr	r2, [pc, #72]	@ (80003e0 <MX_USART2_UART_Init+0x50>)
 8000398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800039a:	4b10      	ldr	r3, [pc, #64]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 800039c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ae:	4b0b      	ldr	r3, [pc, #44]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003b4:	4b09      	ldr	r3, [pc, #36]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 80003b6:	220c      	movs	r2, #12
 80003b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ba:	4b08      	ldr	r3, [pc, #32]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c0:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003c6:	4805      	ldr	r0, [pc, #20]	@ (80003dc <MX_USART2_UART_Init+0x4c>)
 80003c8:	f002 f8c8 	bl	800255c <HAL_UART_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003d2:	f000 f861 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000110 	.word	0x20000110
 80003e0:	40004400 	.word	0x40004400

080003e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b088      	sub	sp, #32
 80003e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ea:	f107 0310 	add.w	r3, r7, #16
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f8:	4b24      	ldr	r3, [pc, #144]	@ (800048c <MX_GPIO_Init+0xa8>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a23      	ldr	r2, [pc, #140]	@ (800048c <MX_GPIO_Init+0xa8>)
 80003fe:	f043 0310 	orr.w	r3, r3, #16
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b21      	ldr	r3, [pc, #132]	@ (800048c <MX_GPIO_Init+0xa8>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0310 	and.w	r3, r3, #16
 800040c:	60fb      	str	r3, [r7, #12]
 800040e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000410:	4b1e      	ldr	r3, [pc, #120]	@ (800048c <MX_GPIO_Init+0xa8>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a1d      	ldr	r2, [pc, #116]	@ (800048c <MX_GPIO_Init+0xa8>)
 8000416:	f043 0320 	orr.w	r3, r3, #32
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b1b      	ldr	r3, [pc, #108]	@ (800048c <MX_GPIO_Init+0xa8>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0320 	and.w	r3, r3, #32
 8000424:	60bb      	str	r3, [r7, #8]
 8000426:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b18      	ldr	r3, [pc, #96]	@ (800048c <MX_GPIO_Init+0xa8>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a17      	ldr	r2, [pc, #92]	@ (800048c <MX_GPIO_Init+0xa8>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b15      	ldr	r3, [pc, #84]	@ (800048c <MX_GPIO_Init+0xa8>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	607b      	str	r3, [r7, #4]
 800043e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000446:	4812      	ldr	r0, [pc, #72]	@ (8000490 <MX_GPIO_Init+0xac>)
 8000448:	f000 ff64 	bl	8001314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800044c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000452:	2301      	movs	r3, #1
 8000454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045a:	2302      	movs	r3, #2
 800045c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	4619      	mov	r1, r3
 8000464:	480a      	ldr	r0, [pc, #40]	@ (8000490 <MX_GPIO_Init+0xac>)
 8000466:	f000 fdd1 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800046a:	2330      	movs	r3, #48	@ 0x30
 800046c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	4619      	mov	r1, r3
 800047c:	4805      	ldr	r0, [pc, #20]	@ (8000494 <MX_GPIO_Init+0xb0>)
 800047e:	f000 fdc5 	bl	800100c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000482:	bf00      	nop
 8000484:	3720      	adds	r7, #32
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000
 8000490:	40011000 	.word	0x40011000
 8000494:	40010800 	.word	0x40010800

08000498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049c:	b672      	cpsid	i
}
 800049e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <Error_Handler+0x8>

080004a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004aa:	4b15      	ldr	r3, [pc, #84]	@ (8000500 <HAL_MspInit+0x5c>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4a14      	ldr	r2, [pc, #80]	@ (8000500 <HAL_MspInit+0x5c>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b12      	ldr	r3, [pc, #72]	@ (8000500 <HAL_MspInit+0x5c>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <HAL_MspInit+0x5c>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000500 <HAL_MspInit+0x5c>)
 80004c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004cc:	61d3      	str	r3, [r2, #28]
 80004ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <HAL_MspInit+0x5c>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004da:	4b0a      	ldr	r3, [pc, #40]	@ (8000504 <HAL_MspInit+0x60>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	4a04      	ldr	r2, [pc, #16]	@ (8000504 <HAL_MspInit+0x60>)
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	40021000 	.word	0x40021000
 8000504:	40010000 	.word	0x40010000

08000508 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a14      	ldr	r2, [pc, #80]	@ (8000574 <HAL_ADC_MspInit+0x6c>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d121      	bne.n	800056c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000528:	4b13      	ldr	r3, [pc, #76]	@ (8000578 <HAL_ADC_MspInit+0x70>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a12      	ldr	r2, [pc, #72]	@ (8000578 <HAL_ADC_MspInit+0x70>)
 800052e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b10      	ldr	r3, [pc, #64]	@ (8000578 <HAL_ADC_MspInit+0x70>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b0d      	ldr	r3, [pc, #52]	@ (8000578 <HAL_ADC_MspInit+0x70>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a0c      	ldr	r2, [pc, #48]	@ (8000578 <HAL_ADC_MspInit+0x70>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <HAL_ADC_MspInit+0x70>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000558:	2303      	movs	r3, #3
 800055a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800055c:	2303      	movs	r3, #3
 800055e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	4805      	ldr	r0, [pc, #20]	@ (800057c <HAL_ADC_MspInit+0x74>)
 8000568:	f000 fd50 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40012400 	.word	0x40012400
 8000578:	40021000 	.word	0x40021000
 800057c:	40010800 	.word	0x40010800

08000580 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a0b      	ldr	r2, [pc, #44]	@ (80005bc <HAL_RTC_MspInit+0x3c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d110      	bne.n	80005b4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000592:	f000 fed7 	bl	8001344 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000596:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <HAL_RTC_MspInit+0x40>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	4a09      	ldr	r2, [pc, #36]	@ (80005c0 <HAL_RTC_MspInit+0x40>)
 800059c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80005a0:	61d3      	str	r3, [r2, #28]
 80005a2:	4b07      	ldr	r3, [pc, #28]	@ (80005c0 <HAL_RTC_MspInit+0x40>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80005ae:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <HAL_RTC_MspInit+0x44>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40002800 	.word	0x40002800
 80005c0:	40021000 	.word	0x40021000
 80005c4:	4242043c 	.word	0x4242043c

080005c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	@ 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0318 	add.w	r3, r7, #24
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a3b      	ldr	r2, [pc, #236]	@ (80006d0 <HAL_UART_MspInit+0x108>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d13a      	bne.n	800065e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005e8:	4b3a      	ldr	r3, [pc, #232]	@ (80006d4 <HAL_UART_MspInit+0x10c>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a39      	ldr	r2, [pc, #228]	@ (80006d4 <HAL_UART_MspInit+0x10c>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b37      	ldr	r3, [pc, #220]	@ (80006d4 <HAL_UART_MspInit+0x10c>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b34      	ldr	r3, [pc, #208]	@ (80006d4 <HAL_UART_MspInit+0x10c>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a33      	ldr	r2, [pc, #204]	@ (80006d4 <HAL_UART_MspInit+0x10c>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b31      	ldr	r3, [pc, #196]	@ (80006d4 <HAL_UART_MspInit+0x10c>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0304 	and.w	r3, r3, #4
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000618:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800061c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061e:	2302      	movs	r3, #2
 8000620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000622:	2303      	movs	r3, #3
 8000624:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	4619      	mov	r1, r3
 800062c:	482a      	ldr	r0, [pc, #168]	@ (80006d8 <HAL_UART_MspInit+0x110>)
 800062e:	f000 fced 	bl	800100c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000632:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 0318 	add.w	r3, r7, #24
 8000644:	4619      	mov	r1, r3
 8000646:	4824      	ldr	r0, [pc, #144]	@ (80006d8 <HAL_UART_MspInit+0x110>)
 8000648:	f000 fce0 	bl	800100c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	2025      	movs	r0, #37	@ 0x25
 8000652:	f000 fbf2 	bl	8000e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000656:	2025      	movs	r0, #37	@ 0x25
 8000658:	f000 fc0b 	bl	8000e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800065c:	e034      	b.n	80006c8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a1e      	ldr	r2, [pc, #120]	@ (80006dc <HAL_UART_MspInit+0x114>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d12f      	bne.n	80006c8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000668:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <HAL_UART_MspInit+0x10c>)
 800066a:	69db      	ldr	r3, [r3, #28]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <HAL_UART_MspInit+0x10c>)
 800066e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000672:	61d3      	str	r3, [r2, #28]
 8000674:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <HAL_UART_MspInit+0x10c>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <HAL_UART_MspInit+0x10c>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a13      	ldr	r2, [pc, #76]	@ (80006d4 <HAL_UART_MspInit+0x10c>)
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <HAL_UART_MspInit+0x10c>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0304 	and.w	r3, r3, #4
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000698:	2304      	movs	r3, #4
 800069a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a0:	2303      	movs	r3, #3
 80006a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f107 0318 	add.w	r3, r7, #24
 80006a8:	4619      	mov	r1, r3
 80006aa:	480b      	ldr	r0, [pc, #44]	@ (80006d8 <HAL_UART_MspInit+0x110>)
 80006ac:	f000 fcae 	bl	800100c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006b0:	2308      	movs	r3, #8
 80006b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 0318 	add.w	r3, r7, #24
 80006c0:	4619      	mov	r1, r3
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <HAL_UART_MspInit+0x110>)
 80006c4:	f000 fca2 	bl	800100c <HAL_GPIO_Init>
}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	@ 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40013800 	.word	0x40013800
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40010800 	.word	0x40010800
 80006dc:	40004400 	.word	0x40004400

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <NMI_Handler+0x4>

080006e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <MemManage_Handler+0x4>

080006f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <UsageFault_Handler+0x4>

08000708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000730:	f000 f87e 	bl	8000830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&uart1.huart);
 800073c:	4802      	ldr	r0, [pc, #8]	@ (8000748 <USART1_IRQHandler+0x10>)
 800073e:	f001 ff83 	bl	8002648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000000c 	.word	0x2000000c

0800074c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000758:	f7ff fff8 	bl	800074c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480b      	ldr	r0, [pc, #44]	@ (800078c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800075e:	490c      	ldr	r1, [pc, #48]	@ (8000790 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000760:	4a0c      	ldr	r2, [pc, #48]	@ (8000794 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a09      	ldr	r2, [pc, #36]	@ (8000798 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000774:	4c09      	ldr	r4, [pc, #36]	@ (800079c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000782:	f002 fcc7 	bl	8003114 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000786:	f7ff fce1 	bl	800014c <main>
  bx lr
 800078a:	4770      	bx	lr
  ldr r0, =_sdata
 800078c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000790:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000794:	080031bc 	.word	0x080031bc
  ldr r2, =_sbss
 8000798:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800079c:	20000264 	.word	0x20000264

080007a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a0:	e7fe      	b.n	80007a0 <ADC1_2_IRQHandler>
	...

080007a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a8:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <HAL_Init+0x28>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a07      	ldr	r2, [pc, #28]	@ (80007cc <HAL_Init+0x28>)
 80007ae:	f043 0310 	orr.w	r3, r3, #16
 80007b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b4:	2003      	movs	r0, #3
 80007b6:	f000 fb35 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ba:	200f      	movs	r0, #15
 80007bc:	f000 f808 	bl	80007d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c0:	f7ff fe70 	bl	80004a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40022000 	.word	0x40022000

080007d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <HAL_InitTick+0x54>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <HAL_InitTick+0x58>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fb4d 	bl	8000e8e <HAL_SYSTICK_Config>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e00e      	b.n	800081c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b0f      	cmp	r3, #15
 8000802:	d80a      	bhi.n	800081a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000804:	2200      	movs	r2, #0
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800080c:	f000 fb15 	bl	8000e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000810:	4a06      	ldr	r2, [pc, #24]	@ (800082c <HAL_InitTick+0x5c>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000816:	2300      	movs	r3, #0
 8000818:	e000      	b.n	800081c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	20000008 	.word	0x20000008
 800082c:	20000004 	.word	0x20000004

08000830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000834:	4b05      	ldr	r3, [pc, #20]	@ (800084c <HAL_IncTick+0x1c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <HAL_IncTick+0x20>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a03      	ldr	r2, [pc, #12]	@ (8000850 <HAL_IncTick+0x20>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	20000008 	.word	0x20000008
 8000850:	20000158 	.word	0x20000158

08000854 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return uwTick;
 8000858:	4b02      	ldr	r3, [pc, #8]	@ (8000864 <HAL_GetTick+0x10>)
 800085a:	681b      	ldr	r3, [r3, #0]
}
 800085c:	4618      	mov	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	20000158 	.word	0x20000158

08000868 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000870:	2300      	movs	r3, #0
 8000872:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d101      	bne.n	800088a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e0be      	b.n	8000a08 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000894:	2b00      	cmp	r3, #0
 8000896:	d109      	bne.n	80008ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2200      	movs	r2, #0
 80008a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff fe2e 	bl	8000508 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f000 f9ab 	bl	8000c08 <ADC_ConversionStop_Disable>
 80008b2:	4603      	mov	r3, r0
 80008b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008ba:	f003 0310 	and.w	r3, r3, #16
 80008be:	2b00      	cmp	r3, #0
 80008c0:	f040 8099 	bne.w	80009f6 <HAL_ADC_Init+0x18e>
 80008c4:	7dfb      	ldrb	r3, [r7, #23]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8095 	bne.w	80009f6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80008d4:	f023 0302 	bic.w	r3, r3, #2
 80008d8:	f043 0202 	orr.w	r2, r3, #2
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	7b1b      	ldrb	r3, [r3, #12]
 80008ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000900:	d003      	beq.n	800090a <HAL_ADC_Init+0xa2>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d102      	bne.n	8000910 <HAL_ADC_Init+0xa8>
 800090a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800090e:	e000      	b.n	8000912 <HAL_ADC_Init+0xaa>
 8000910:	2300      	movs	r3, #0
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7d1b      	ldrb	r3, [r3, #20]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d119      	bne.n	8000954 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	7b1b      	ldrb	r3, [r3, #12]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d109      	bne.n	800093c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	3b01      	subs	r3, #1
 800092e:	035a      	lsls	r2, r3, #13
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	4313      	orrs	r3, r2
 8000934:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	e00b      	b.n	8000954 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000940:	f043 0220 	orr.w	r2, r3, #32
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800094c:	f043 0201 	orr.w	r2, r3, #1
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	430a      	orrs	r2, r1
 8000966:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	689a      	ldr	r2, [r3, #8]
 800096e:	4b28      	ldr	r3, [pc, #160]	@ (8000a10 <HAL_ADC_Init+0x1a8>)
 8000970:	4013      	ands	r3, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	6812      	ldr	r2, [r2, #0]
 8000976:	68b9      	ldr	r1, [r7, #8]
 8000978:	430b      	orrs	r3, r1
 800097a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000984:	d003      	beq.n	800098e <HAL_ADC_Init+0x126>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d104      	bne.n	8000998 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	691b      	ldr	r3, [r3, #16]
 8000992:	3b01      	subs	r3, #1
 8000994:	051b      	lsls	r3, r3, #20
 8000996:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800099e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	430a      	orrs	r2, r1
 80009aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <HAL_ADC_Init+0x1ac>)
 80009b4:	4013      	ands	r3, r2
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d10b      	bne.n	80009d4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009c6:	f023 0303 	bic.w	r3, r3, #3
 80009ca:	f043 0201 	orr.w	r2, r3, #1
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009d2:	e018      	b.n	8000a06 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009d8:	f023 0312 	bic.w	r3, r3, #18
 80009dc:	f043 0210 	orr.w	r2, r3, #16
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e8:	f043 0201 	orr.w	r2, r3, #1
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009f4:	e007      	b.n	8000a06 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009fa:	f043 0210 	orr.w	r2, r3, #16
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	ffe1f7fd 	.word	0xffe1f7fd
 8000a14:	ff1f0efe 	.word	0xff1f0efe

08000a18 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d101      	bne.n	8000a38 <HAL_ADC_ConfigChannel+0x20>
 8000a34:	2302      	movs	r3, #2
 8000a36:	e0dc      	b.n	8000bf2 <HAL_ADC_ConfigChannel+0x1da>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	2b06      	cmp	r3, #6
 8000a46:	d81c      	bhi.n	8000a82 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685a      	ldr	r2, [r3, #4]
 8000a52:	4613      	mov	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4413      	add	r3, r2
 8000a58:	3b05      	subs	r3, #5
 8000a5a:	221f      	movs	r2, #31
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	4019      	ands	r1, r3
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	6818      	ldr	r0, [r3, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685a      	ldr	r2, [r3, #4]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4413      	add	r3, r2
 8000a72:	3b05      	subs	r3, #5
 8000a74:	fa00 f203 	lsl.w	r2, r0, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a80:	e03c      	b.n	8000afc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	2b0c      	cmp	r3, #12
 8000a88:	d81c      	bhi.n	8000ac4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685a      	ldr	r2, [r3, #4]
 8000a94:	4613      	mov	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	4413      	add	r3, r2
 8000a9a:	3b23      	subs	r3, #35	@ 0x23
 8000a9c:	221f      	movs	r2, #31
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	4019      	ands	r1, r3
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	6818      	ldr	r0, [r3, #0]
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685a      	ldr	r2, [r3, #4]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	3b23      	subs	r3, #35	@ 0x23
 8000ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ac2:	e01b      	b.n	8000afc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	3b41      	subs	r3, #65	@ 0x41
 8000ad6:	221f      	movs	r2, #31
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	4019      	ands	r1, r3
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	6818      	ldr	r0, [r3, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685a      	ldr	r2, [r3, #4]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	4413      	add	r3, r2
 8000aee:	3b41      	subs	r3, #65	@ 0x41
 8000af0:	fa00 f203 	lsl.w	r2, r0, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	430a      	orrs	r2, r1
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b09      	cmp	r3, #9
 8000b02:	d91c      	bls.n	8000b3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	68d9      	ldr	r1, [r3, #12]
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	4413      	add	r3, r2
 8000b14:	3b1e      	subs	r3, #30
 8000b16:	2207      	movs	r2, #7
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	4019      	ands	r1, r3
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	6898      	ldr	r0, [r3, #8]
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3b1e      	subs	r3, #30
 8000b30:	fa00 f203 	lsl.w	r2, r0, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	e019      	b.n	8000b72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6919      	ldr	r1, [r3, #16]
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	2207      	movs	r2, #7
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	4019      	ands	r1, r3
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	6898      	ldr	r0, [r3, #8]
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4413      	add	r3, r2
 8000b66:	fa00 f203 	lsl.w	r2, r0, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b10      	cmp	r3, #16
 8000b78:	d003      	beq.n	8000b82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b7e:	2b11      	cmp	r3, #17
 8000b80:	d132      	bne.n	8000be8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a1d      	ldr	r2, [pc, #116]	@ (8000bfc <HAL_ADC_ConfigChannel+0x1e4>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d125      	bne.n	8000bd8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d126      	bne.n	8000be8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000ba8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b10      	cmp	r3, #16
 8000bb0:	d11a      	bne.n	8000be8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bb2:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <HAL_ADC_ConfigChannel+0x1e8>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a13      	ldr	r2, [pc, #76]	@ (8000c04 <HAL_ADC_ConfigChannel+0x1ec>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	0c9a      	lsrs	r2, r3, #18
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bc8:	e002      	b.n	8000bd0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f9      	bne.n	8000bca <HAL_ADC_ConfigChannel+0x1b2>
 8000bd6:	e007      	b.n	8000be8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bdc:	f043 0220 	orr.w	r2, r3, #32
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	40012400 	.word	0x40012400
 8000c00:	20000000 	.word	0x20000000
 8000c04:	431bde83 	.word	0x431bde83

08000c08 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d12e      	bne.n	8000c80 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f022 0201 	bic.w	r2, r2, #1
 8000c30:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c32:	f7ff fe0f 	bl	8000854 <HAL_GetTick>
 8000c36:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c38:	e01b      	b.n	8000c72 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000c3a:	f7ff fe0b 	bl	8000854 <HAL_GetTick>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d914      	bls.n	8000c72 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d10d      	bne.n	8000c72 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c5a:	f043 0210 	orr.w	r2, r3, #16
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c66:	f043 0201 	orr.w	r2, r3, #1
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e007      	b.n	8000c82 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d0dc      	beq.n	8000c3a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	@ (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	@ (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db0b      	blt.n	8000d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f003 021f 	and.w	r2, r3, #31
 8000d08:	4906      	ldr	r1, [pc, #24]	@ (8000d24 <__NVIC_EnableIRQ+0x34>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	2001      	movs	r0, #1
 8000d12:	fa00 f202 	lsl.w	r2, r0, r2
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	@ (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	@ (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	@ 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	@ 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e04:	f7ff ff90 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff2d 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff42 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff90 	bl	8000d7c <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff5f 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff35 	bl	8000cf0 <__NVIC_EnableIRQ>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffa2 	bl	8000de0 <SysTick_Config>
 8000e9c:	4603      	mov	r3, r0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b085      	sub	sp, #20
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d008      	beq.n	8000ed0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e020      	b.n	8000f12 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 020e 	bic.w	r2, r2, #14
 8000ede:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0201 	bic.w	r2, r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ef8:	2101      	movs	r1, #1
 8000efa:	fa01 f202 	lsl.w	r2, r1, r2
 8000efe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2201      	movs	r2, #1
 8000f04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d005      	beq.n	8000f40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2204      	movs	r2, #4
 8000f38:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	e051      	b.n	8000fe4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 020e 	bic.w	r2, r2, #14
 8000f4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 0201 	bic.w	r2, r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a22      	ldr	r2, [pc, #136]	@ (8000ff0 <HAL_DMA_Abort_IT+0xd4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d029      	beq.n	8000fbe <HAL_DMA_Abort_IT+0xa2>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a21      	ldr	r2, [pc, #132]	@ (8000ff4 <HAL_DMA_Abort_IT+0xd8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d022      	beq.n	8000fba <HAL_DMA_Abort_IT+0x9e>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff8 <HAL_DMA_Abort_IT+0xdc>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d01a      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x98>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a1e      	ldr	r2, [pc, #120]	@ (8000ffc <HAL_DMA_Abort_IT+0xe0>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d012      	beq.n	8000fae <HAL_DMA_Abort_IT+0x92>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001000 <HAL_DMA_Abort_IT+0xe4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00a      	beq.n	8000fa8 <HAL_DMA_Abort_IT+0x8c>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a1b      	ldr	r2, [pc, #108]	@ (8001004 <HAL_DMA_Abort_IT+0xe8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d102      	bne.n	8000fa2 <HAL_DMA_Abort_IT+0x86>
 8000f9c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000fa0:	e00e      	b.n	8000fc0 <HAL_DMA_Abort_IT+0xa4>
 8000fa2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fa6:	e00b      	b.n	8000fc0 <HAL_DMA_Abort_IT+0xa4>
 8000fa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fac:	e008      	b.n	8000fc0 <HAL_DMA_Abort_IT+0xa4>
 8000fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb2:	e005      	b.n	8000fc0 <HAL_DMA_Abort_IT+0xa4>
 8000fb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fb8:	e002      	b.n	8000fc0 <HAL_DMA_Abort_IT+0xa4>
 8000fba:	2310      	movs	r3, #16
 8000fbc:	e000      	b.n	8000fc0 <HAL_DMA_Abort_IT+0xa4>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	4a11      	ldr	r2, [pc, #68]	@ (8001008 <HAL_DMA_Abort_IT+0xec>)
 8000fc2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	4798      	blx	r3
    } 
  }
  return status;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40020008 	.word	0x40020008
 8000ff4:	4002001c 	.word	0x4002001c
 8000ff8:	40020030 	.word	0x40020030
 8000ffc:	40020044 	.word	0x40020044
 8001000:	40020058 	.word	0x40020058
 8001004:	4002006c 	.word	0x4002006c
 8001008:	40020000 	.word	0x40020000

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b08b      	sub	sp, #44	@ 0x2c
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101e:	e169      	b.n	80012f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001020:	2201      	movs	r2, #1
 8001022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 8158 	bne.w	80012ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	4a9a      	ldr	r2, [pc, #616]	@ (80012ac <HAL_GPIO_Init+0x2a0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d05e      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 8001048:	4a98      	ldr	r2, [pc, #608]	@ (80012ac <HAL_GPIO_Init+0x2a0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d875      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 800104e:	4a98      	ldr	r2, [pc, #608]	@ (80012b0 <HAL_GPIO_Init+0x2a4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d058      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 8001054:	4a96      	ldr	r2, [pc, #600]	@ (80012b0 <HAL_GPIO_Init+0x2a4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d86f      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 800105a:	4a96      	ldr	r2, [pc, #600]	@ (80012b4 <HAL_GPIO_Init+0x2a8>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d052      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 8001060:	4a94      	ldr	r2, [pc, #592]	@ (80012b4 <HAL_GPIO_Init+0x2a8>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d869      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 8001066:	4a94      	ldr	r2, [pc, #592]	@ (80012b8 <HAL_GPIO_Init+0x2ac>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d04c      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 800106c:	4a92      	ldr	r2, [pc, #584]	@ (80012b8 <HAL_GPIO_Init+0x2ac>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d863      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 8001072:	4a92      	ldr	r2, [pc, #584]	@ (80012bc <HAL_GPIO_Init+0x2b0>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d046      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
 8001078:	4a90      	ldr	r2, [pc, #576]	@ (80012bc <HAL_GPIO_Init+0x2b0>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d85d      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 800107e:	2b12      	cmp	r3, #18
 8001080:	d82a      	bhi.n	80010d8 <HAL_GPIO_Init+0xcc>
 8001082:	2b12      	cmp	r3, #18
 8001084:	d859      	bhi.n	800113a <HAL_GPIO_Init+0x12e>
 8001086:	a201      	add	r2, pc, #4	@ (adr r2, 800108c <HAL_GPIO_Init+0x80>)
 8001088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108c:	08001107 	.word	0x08001107
 8001090:	080010e1 	.word	0x080010e1
 8001094:	080010f3 	.word	0x080010f3
 8001098:	08001135 	.word	0x08001135
 800109c:	0800113b 	.word	0x0800113b
 80010a0:	0800113b 	.word	0x0800113b
 80010a4:	0800113b 	.word	0x0800113b
 80010a8:	0800113b 	.word	0x0800113b
 80010ac:	0800113b 	.word	0x0800113b
 80010b0:	0800113b 	.word	0x0800113b
 80010b4:	0800113b 	.word	0x0800113b
 80010b8:	0800113b 	.word	0x0800113b
 80010bc:	0800113b 	.word	0x0800113b
 80010c0:	0800113b 	.word	0x0800113b
 80010c4:	0800113b 	.word	0x0800113b
 80010c8:	0800113b 	.word	0x0800113b
 80010cc:	0800113b 	.word	0x0800113b
 80010d0:	080010e9 	.word	0x080010e9
 80010d4:	080010fd 	.word	0x080010fd
 80010d8:	4a79      	ldr	r2, [pc, #484]	@ (80012c0 <HAL_GPIO_Init+0x2b4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010de:	e02c      	b.n	800113a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	623b      	str	r3, [r7, #32]
          break;
 80010e6:	e029      	b.n	800113c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	3304      	adds	r3, #4
 80010ee:	623b      	str	r3, [r7, #32]
          break;
 80010f0:	e024      	b.n	800113c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	3308      	adds	r3, #8
 80010f8:	623b      	str	r3, [r7, #32]
          break;
 80010fa:	e01f      	b.n	800113c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	330c      	adds	r3, #12
 8001102:	623b      	str	r3, [r7, #32]
          break;
 8001104:	e01a      	b.n	800113c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d102      	bne.n	8001114 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800110e:	2304      	movs	r3, #4
 8001110:	623b      	str	r3, [r7, #32]
          break;
 8001112:	e013      	b.n	800113c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d105      	bne.n	8001128 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800111c:	2308      	movs	r3, #8
 800111e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	69fa      	ldr	r2, [r7, #28]
 8001124:	611a      	str	r2, [r3, #16]
          break;
 8001126:	e009      	b.n	800113c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001128:	2308      	movs	r3, #8
 800112a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	615a      	str	r2, [r3, #20]
          break;
 8001132:	e003      	b.n	800113c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
          break;
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x130>
          break;
 800113a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	2bff      	cmp	r3, #255	@ 0xff
 8001140:	d801      	bhi.n	8001146 <HAL_GPIO_Init+0x13a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	e001      	b.n	800114a <HAL_GPIO_Init+0x13e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3304      	adds	r3, #4
 800114a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	2bff      	cmp	r3, #255	@ 0xff
 8001150:	d802      	bhi.n	8001158 <HAL_GPIO_Init+0x14c>
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	e002      	b.n	800115e <HAL_GPIO_Init+0x152>
 8001158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115a:	3b08      	subs	r3, #8
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	210f      	movs	r1, #15
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	401a      	ands	r2, r3
 8001170:	6a39      	ldr	r1, [r7, #32]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	431a      	orrs	r2, r3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80b1 	beq.w	80012ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800118c:	4b4d      	ldr	r3, [pc, #308]	@ (80012c4 <HAL_GPIO_Init+0x2b8>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a4c      	ldr	r2, [pc, #304]	@ (80012c4 <HAL_GPIO_Init+0x2b8>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b4a      	ldr	r3, [pc, #296]	@ (80012c4 <HAL_GPIO_Init+0x2b8>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011a4:	4a48      	ldr	r2, [pc, #288]	@ (80012c8 <HAL_GPIO_Init+0x2bc>)
 80011a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	4013      	ands	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a40      	ldr	r2, [pc, #256]	@ (80012cc <HAL_GPIO_Init+0x2c0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d013      	beq.n	80011f8 <HAL_GPIO_Init+0x1ec>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a3f      	ldr	r2, [pc, #252]	@ (80012d0 <HAL_GPIO_Init+0x2c4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d00d      	beq.n	80011f4 <HAL_GPIO_Init+0x1e8>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a3e      	ldr	r2, [pc, #248]	@ (80012d4 <HAL_GPIO_Init+0x2c8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d007      	beq.n	80011f0 <HAL_GPIO_Init+0x1e4>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a3d      	ldr	r2, [pc, #244]	@ (80012d8 <HAL_GPIO_Init+0x2cc>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d101      	bne.n	80011ec <HAL_GPIO_Init+0x1e0>
 80011e8:	2303      	movs	r3, #3
 80011ea:	e006      	b.n	80011fa <HAL_GPIO_Init+0x1ee>
 80011ec:	2304      	movs	r3, #4
 80011ee:	e004      	b.n	80011fa <HAL_GPIO_Init+0x1ee>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e002      	b.n	80011fa <HAL_GPIO_Init+0x1ee>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <HAL_GPIO_Init+0x1ee>
 80011f8:	2300      	movs	r3, #0
 80011fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011fc:	f002 0203 	and.w	r2, r2, #3
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	4093      	lsls	r3, r2
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800120a:	492f      	ldr	r1, [pc, #188]	@ (80012c8 <HAL_GPIO_Init+0x2bc>)
 800120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001224:	4b2d      	ldr	r3, [pc, #180]	@ (80012dc <HAL_GPIO_Init+0x2d0>)
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	492c      	ldr	r1, [pc, #176]	@ (80012dc <HAL_GPIO_Init+0x2d0>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	608b      	str	r3, [r1, #8]
 8001230:	e006      	b.n	8001240 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001232:	4b2a      	ldr	r3, [pc, #168]	@ (80012dc <HAL_GPIO_Init+0x2d0>)
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	43db      	mvns	r3, r3
 800123a:	4928      	ldr	r1, [pc, #160]	@ (80012dc <HAL_GPIO_Init+0x2d0>)
 800123c:	4013      	ands	r3, r2
 800123e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800124c:	4b23      	ldr	r3, [pc, #140]	@ (80012dc <HAL_GPIO_Init+0x2d0>)
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	4922      	ldr	r1, [pc, #136]	@ (80012dc <HAL_GPIO_Init+0x2d0>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	60cb      	str	r3, [r1, #12]
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800125a:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <HAL_GPIO_Init+0x2d0>)
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	43db      	mvns	r3, r3
 8001262:	491e      	ldr	r1, [pc, #120]	@ (80012dc <HAL_GPIO_Init+0x2d0>)
 8001264:	4013      	ands	r3, r2
 8001266:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001274:	4b19      	ldr	r3, [pc, #100]	@ (80012dc <HAL_GPIO_Init+0x2d0>)
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	4918      	ldr	r1, [pc, #96]	@ (80012dc <HAL_GPIO_Init+0x2d0>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001282:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <HAL_GPIO_Init+0x2d0>)
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	43db      	mvns	r3, r3
 800128a:	4914      	ldr	r1, [pc, #80]	@ (80012dc <HAL_GPIO_Init+0x2d0>)
 800128c:	4013      	ands	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d021      	beq.n	80012e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <HAL_GPIO_Init+0x2d0>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	490e      	ldr	r1, [pc, #56]	@ (80012dc <HAL_GPIO_Init+0x2d0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	600b      	str	r3, [r1, #0]
 80012a8:	e021      	b.n	80012ee <HAL_GPIO_Init+0x2e2>
 80012aa:	bf00      	nop
 80012ac:	10320000 	.word	0x10320000
 80012b0:	10310000 	.word	0x10310000
 80012b4:	10220000 	.word	0x10220000
 80012b8:	10210000 	.word	0x10210000
 80012bc:	10120000 	.word	0x10120000
 80012c0:	10110000 	.word	0x10110000
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010000 	.word	0x40010000
 80012cc:	40010800 	.word	0x40010800
 80012d0:	40010c00 	.word	0x40010c00
 80012d4:	40011000 	.word	0x40011000
 80012d8:	40011400 	.word	0x40011400
 80012dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <HAL_GPIO_Init+0x304>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	4909      	ldr	r1, [pc, #36]	@ (8001310 <HAL_GPIO_Init+0x304>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f0:	3301      	adds	r3, #1
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fa:	fa22 f303 	lsr.w	r3, r2, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f47f ae8e 	bne.w	8001020 <HAL_GPIO_Init+0x14>
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	372c      	adds	r7, #44	@ 0x2c
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	40010400 	.word	0x40010400

08001314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
 8001320:	4613      	mov	r3, r2
 8001322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001324:	787b      	ldrb	r3, [r7, #1]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001330:	e003      	b.n	800133a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	041a      	lsls	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	611a      	str	r2, [r3, #16]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001348:	4b03      	ldr	r3, [pc, #12]	@ (8001358 <HAL_PWR_EnableBkUpAccess+0x14>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	420e0020 	.word	0x420e0020

0800135c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e272      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 8087 	beq.w	800148a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800137c:	4b92      	ldr	r3, [pc, #584]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b04      	cmp	r3, #4
 8001386:	d00c      	beq.n	80013a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001388:	4b8f      	ldr	r3, [pc, #572]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b08      	cmp	r3, #8
 8001392:	d112      	bne.n	80013ba <HAL_RCC_OscConfig+0x5e>
 8001394:	4b8c      	ldr	r3, [pc, #560]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a0:	d10b      	bne.n	80013ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a2:	4b89      	ldr	r3, [pc, #548]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d06c      	beq.n	8001488 <HAL_RCC_OscConfig+0x12c>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d168      	bne.n	8001488 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e24c      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0x76>
 80013c4:	4b80      	ldr	r3, [pc, #512]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a7f      	ldr	r2, [pc, #508]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e02e      	b.n	8001430 <HAL_RCC_OscConfig+0xd4>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x98>
 80013da:	4b7b      	ldr	r3, [pc, #492]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a7a      	ldr	r2, [pc, #488]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b78      	ldr	r3, [pc, #480]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a77      	ldr	r2, [pc, #476]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e01d      	b.n	8001430 <HAL_RCC_OscConfig+0xd4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0xbc>
 80013fe:	4b72      	ldr	r3, [pc, #456]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a71      	ldr	r2, [pc, #452]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b6f      	ldr	r3, [pc, #444]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a6e      	ldr	r2, [pc, #440]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e00b      	b.n	8001430 <HAL_RCC_OscConfig+0xd4>
 8001418:	4b6b      	ldr	r3, [pc, #428]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a6a      	ldr	r2, [pc, #424]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800141e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b68      	ldr	r3, [pc, #416]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a67      	ldr	r2, [pc, #412]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800142e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fa0c 	bl	8000854 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fa08 	bl	8000854 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	@ 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e200      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	4b5d      	ldr	r3, [pc, #372]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0xe4>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff f9f8 	bl	8000854 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff f9f4 	bl	8000854 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	@ 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e1ec      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	4b53      	ldr	r3, [pc, #332]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x10c>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d063      	beq.n	800155e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001496:	4b4c      	ldr	r3, [pc, #304]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014a2:	4b49      	ldr	r3, [pc, #292]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d11c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x18c>
 80014ae:	4b46      	ldr	r3, [pc, #280]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d116      	bne.n	80014e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ba:	4b43      	ldr	r3, [pc, #268]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x176>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d001      	beq.n	80014d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e1c0      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b3d      	ldr	r3, [pc, #244]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4939      	ldr	r1, [pc, #228]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	e03a      	b.n	800155e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d020      	beq.n	8001532 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f0:	4b36      	ldr	r3, [pc, #216]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff f9ad 	bl	8000854 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff f9a9 	bl	8000854 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e1a1      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001510:	4b2d      	ldr	r3, [pc, #180]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151c:	4b2a      	ldr	r3, [pc, #168]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4927      	ldr	r1, [pc, #156]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 800152c:	4313      	orrs	r3, r2
 800152e:	600b      	str	r3, [r1, #0]
 8001530:	e015      	b.n	800155e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001532:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <HAL_RCC_OscConfig+0x270>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff f98c 	bl	8000854 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001540:	f7ff f988 	bl	8000854 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e180      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001552:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d03a      	beq.n	80015e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d019      	beq.n	80015a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001572:	4b17      	ldr	r3, [pc, #92]	@ (80015d0 <HAL_RCC_OscConfig+0x274>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001578:	f7ff f96c 	bl	8000854 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff f968 	bl	8000854 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e160      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001592:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <HAL_RCC_OscConfig+0x26c>)
 8001594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800159e:	2001      	movs	r0, #1
 80015a0:	f000 face 	bl	8001b40 <RCC_Delay>
 80015a4:	e01c      	b.n	80015e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a6:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <HAL_RCC_OscConfig+0x274>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ac:	f7ff f952 	bl	8000854 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b2:	e00f      	b.n	80015d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b4:	f7ff f94e 	bl	8000854 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d908      	bls.n	80015d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e146      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	42420000 	.word	0x42420000
 80015d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d4:	4b92      	ldr	r3, [pc, #584]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1e9      	bne.n	80015b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80a6 	beq.w	800173a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10d      	bne.n	800161a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	4b88      	ldr	r3, [pc, #544]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a87      	ldr	r2, [pc, #540]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001608:	61d3      	str	r3, [r2, #28]
 800160a:	4b85      	ldr	r3, [pc, #532]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001616:	2301      	movs	r3, #1
 8001618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161a:	4b82      	ldr	r3, [pc, #520]	@ (8001824 <HAL_RCC_OscConfig+0x4c8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001622:	2b00      	cmp	r3, #0
 8001624:	d118      	bne.n	8001658 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001626:	4b7f      	ldr	r3, [pc, #508]	@ (8001824 <HAL_RCC_OscConfig+0x4c8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a7e      	ldr	r2, [pc, #504]	@ (8001824 <HAL_RCC_OscConfig+0x4c8>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001632:	f7ff f90f 	bl	8000854 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163a:	f7ff f90b 	bl	8000854 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b64      	cmp	r3, #100	@ 0x64
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e103      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	4b75      	ldr	r3, [pc, #468]	@ (8001824 <HAL_RCC_OscConfig+0x4c8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x312>
 8001660:	4b6f      	ldr	r3, [pc, #444]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4a6e      	ldr	r2, [pc, #440]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6213      	str	r3, [r2, #32]
 800166c:	e02d      	b.n	80016ca <HAL_RCC_OscConfig+0x36e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x334>
 8001676:	4b6a      	ldr	r3, [pc, #424]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a69      	ldr	r2, [pc, #420]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	6213      	str	r3, [r2, #32]
 8001682:	4b67      	ldr	r3, [pc, #412]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4a66      	ldr	r2, [pc, #408]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	f023 0304 	bic.w	r3, r3, #4
 800168c:	6213      	str	r3, [r2, #32]
 800168e:	e01c      	b.n	80016ca <HAL_RCC_OscConfig+0x36e>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b05      	cmp	r3, #5
 8001696:	d10c      	bne.n	80016b2 <HAL_RCC_OscConfig+0x356>
 8001698:	4b61      	ldr	r3, [pc, #388]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4a60      	ldr	r2, [pc, #384]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6213      	str	r3, [r2, #32]
 80016a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4a5d      	ldr	r2, [pc, #372]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6213      	str	r3, [r2, #32]
 80016b0:	e00b      	b.n	80016ca <HAL_RCC_OscConfig+0x36e>
 80016b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	f023 0301 	bic.w	r3, r3, #1
 80016bc:	6213      	str	r3, [r2, #32]
 80016be:	4b58      	ldr	r3, [pc, #352]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4a57      	ldr	r2, [pc, #348]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	f023 0304 	bic.w	r3, r3, #4
 80016c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d015      	beq.n	80016fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d2:	f7ff f8bf 	bl	8000854 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d8:	e00a      	b.n	80016f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016da:	f7ff f8bb 	bl	8000854 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e0b1      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0ee      	beq.n	80016da <HAL_RCC_OscConfig+0x37e>
 80016fc:	e014      	b.n	8001728 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff f8a9 	bl	8000854 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001704:	e00a      	b.n	800171c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff f8a5 	bl	8000854 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e09b      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171c:	4b40      	ldr	r3, [pc, #256]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1ee      	bne.n	8001706 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d105      	bne.n	800173a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172e:	4b3c      	ldr	r3, [pc, #240]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	4a3b      	ldr	r2, [pc, #236]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001738:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 8087 	beq.w	8001852 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001744:	4b36      	ldr	r3, [pc, #216]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d061      	beq.n	8001814 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d146      	bne.n	80017e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001758:	4b33      	ldr	r3, [pc, #204]	@ (8001828 <HAL_RCC_OscConfig+0x4cc>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175e:	f7ff f879 	bl	8000854 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001766:	f7ff f875 	bl	8000854 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e06d      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001778:	4b29      	ldr	r3, [pc, #164]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f0      	bne.n	8001766 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800178c:	d108      	bne.n	80017a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800178e:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	4921      	ldr	r1, [pc, #132]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a19      	ldr	r1, [r3, #32]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	430b      	orrs	r3, r1
 80017b2:	491b      	ldr	r1, [pc, #108]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <HAL_RCC_OscConfig+0x4cc>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff f849 	bl	8000854 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c6:	f7ff f845 	bl	8000854 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e03d      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x46a>
 80017e4:	e035      	b.n	8001852 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <HAL_RCC_OscConfig+0x4cc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff f832 	bl	8000854 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff f82e 	bl	8000854 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e026      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x498>
 8001812:	e01e      	b.n	8001852 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d107      	bne.n	800182c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e019      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>
 8001820:	40021000 	.word	0x40021000
 8001824:	40007000 	.word	0x40007000
 8001828:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800182c:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <HAL_RCC_OscConfig+0x500>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	429a      	cmp	r2, r3
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d001      	beq.n	8001852 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000

08001860 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0d0      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001874:	4b6a      	ldr	r3, [pc, #424]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d910      	bls.n	80018a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b67      	ldr	r3, [pc, #412]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 0207 	bic.w	r2, r3, #7
 800188a:	4965      	ldr	r1, [pc, #404]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b63      	ldr	r3, [pc, #396]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0b8      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d020      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018bc:	4b59      	ldr	r3, [pc, #356]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4a58      	ldr	r2, [pc, #352]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d4:	4b53      	ldr	r3, [pc, #332]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	4a52      	ldr	r2, [pc, #328]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e0:	4b50      	ldr	r3, [pc, #320]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	494d      	ldr	r1, [pc, #308]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d040      	beq.n	8001980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	4b47      	ldr	r3, [pc, #284]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d115      	bne.n	800193e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e07f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191e:	4b41      	ldr	r3, [pc, #260]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d109      	bne.n	800193e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e073      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e06b      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800193e:	4b39      	ldr	r3, [pc, #228]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f023 0203 	bic.w	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4936      	ldr	r1, [pc, #216]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001950:	f7fe ff80 	bl	8000854 <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	e00a      	b.n	800196e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001958:	f7fe ff7c 	bl	8000854 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e053      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 020c 	and.w	r2, r3, #12
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	429a      	cmp	r2, r3
 800197e:	d1eb      	bne.n	8001958 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001980:	4b27      	ldr	r3, [pc, #156]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d210      	bcs.n	80019b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 0207 	bic.w	r2, r3, #7
 8001996:	4922      	ldr	r1, [pc, #136]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b20      	ldr	r3, [pc, #128]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e032      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019bc:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4916      	ldr	r1, [pc, #88]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019da:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	490e      	ldr	r1, [pc, #56]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ee:	f000 f821 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 80019f2:	4602      	mov	r2, r0
 80019f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	490a      	ldr	r1, [pc, #40]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c8>)
 8001a00:	5ccb      	ldrb	r3, [r1, r3]
 8001a02:	fa22 f303 	lsr.w	r3, r2, r3
 8001a06:	4a09      	ldr	r2, [pc, #36]	@ (8001a2c <HAL_RCC_ClockConfig+0x1cc>)
 8001a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_RCC_ClockConfig+0x1d0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fede 	bl	80007d0 <HAL_InitTick>

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40022000 	.word	0x40022000
 8001a24:	40021000 	.word	0x40021000
 8001a28:	08003174 	.word	0x08003174
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000004 	.word	0x20000004

08001a34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d002      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x30>
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d003      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x36>
 8001a62:	e027      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a64:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <HAL_RCC_GetSysClockFreq+0x98>)
 8001a66:	613b      	str	r3, [r7, #16]
      break;
 8001a68:	e027      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	0c9b      	lsrs	r3, r3, #18
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	4a17      	ldr	r2, [pc, #92]	@ (8001ad0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a74:	5cd3      	ldrb	r3, [r2, r3]
 8001a76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d010      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a82:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	0c5b      	lsrs	r3, r3, #17
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	4a11      	ldr	r2, [pc, #68]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a8e:	5cd3      	ldrb	r3, [r2, r3]
 8001a90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a0d      	ldr	r2, [pc, #52]	@ (8001acc <HAL_RCC_GetSysClockFreq+0x98>)
 8001a96:	fb03 f202 	mul.w	r2, r3, r2
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e004      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001aa8:	fb02 f303 	mul.w	r3, r2, r3
 8001aac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	613b      	str	r3, [r7, #16]
      break;
 8001ab2:	e002      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ab6:	613b      	str	r3, [r7, #16]
      break;
 8001ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aba:	693b      	ldr	r3, [r7, #16]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	007a1200 	.word	0x007a1200
 8001ad0:	0800318c 	.word	0x0800318c
 8001ad4:	0800319c 	.word	0x0800319c
 8001ad8:	003d0900 	.word	0x003d0900

08001adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae0:	4b02      	ldr	r3, [pc, #8]	@ (8001aec <HAL_RCC_GetHCLKFreq+0x10>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	20000000 	.word	0x20000000

08001af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001af4:	f7ff fff2 	bl	8001adc <HAL_RCC_GetHCLKFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	0a1b      	lsrs	r3, r3, #8
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	4903      	ldr	r1, [pc, #12]	@ (8001b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	08003184 	.word	0x08003184

08001b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b1c:	f7ff ffde 	bl	8001adc <HAL_RCC_GetHCLKFreq>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	0adb      	lsrs	r3, r3, #11
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	4903      	ldr	r1, [pc, #12]	@ (8001b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b2e:	5ccb      	ldrb	r3, [r1, r3]
 8001b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	08003184 	.word	0x08003184

08001b40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b48:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <RCC_Delay+0x34>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <RCC_Delay+0x38>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	0a5b      	lsrs	r3, r3, #9
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
 8001b5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b5c:	bf00      	nop
  }
  while (Delay --);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1e5a      	subs	r2, r3, #1
 8001b62:	60fa      	str	r2, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f9      	bne.n	8001b5c <RCC_Delay+0x1c>
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr
 8001b74:	20000000 	.word	0x20000000
 8001b78:	10624dd3 	.word	0x10624dd3

08001b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d07d      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9c:	4b4f      	ldr	r3, [pc, #316]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10d      	bne.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	4a4b      	ldr	r2, [pc, #300]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	61d3      	str	r3, [r2, #28]
 8001bb4:	4b49      	ldr	r3, [pc, #292]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc4:	4b46      	ldr	r3, [pc, #280]	@ (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d118      	bne.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd0:	4b43      	ldr	r3, [pc, #268]	@ (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a42      	ldr	r2, [pc, #264]	@ (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bdc:	f7fe fe3a 	bl	8000854 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be2:	e008      	b.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be4:	f7fe fe36 	bl	8000854 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	@ 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e06d      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c02:	4b36      	ldr	r3, [pc, #216]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d02e      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d027      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c20:	4b2e      	ldr	r3, [pc, #184]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c30:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c36:	4a29      	ldr	r2, [pc, #164]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d014      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7fe fe05 	bl	8000854 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4c:	e00a      	b.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4e:	f7fe fe01 	bl	8000854 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e036      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c64:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0ee      	beq.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c70:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4917      	ldr	r1, [pc, #92]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	4a13      	ldr	r2, [pc, #76]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	490b      	ldr	r1, [pc, #44]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d008      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cbe:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	4904      	ldr	r1, [pc, #16]	@ (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40007000 	.word	0x40007000
 8001ce4:	42420440 	.word	0x42420440

08001ce8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	2300      	movs	r3, #0
 8001d02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b10      	cmp	r3, #16
 8001d08:	d00a      	beq.n	8001d20 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b10      	cmp	r3, #16
 8001d0e:	f200 808a 	bhi.w	8001e26 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d045      	beq.n	8001da4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d075      	beq.n	8001e0a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001d1e:	e082      	b.n	8001e26 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001d20:	4b46      	ldr	r3, [pc, #280]	@ (8001e3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001d26:	4b45      	ldr	r3, [pc, #276]	@ (8001e3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d07b      	beq.n	8001e2a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	0c9b      	lsrs	r3, r3, #18
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	4a41      	ldr	r2, [pc, #260]	@ (8001e40 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d015      	beq.n	8001d76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d4a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	0c5b      	lsrs	r3, r3, #17
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	4a3b      	ldr	r2, [pc, #236]	@ (8001e44 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00d      	beq.n	8001d80 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001d64:	4a38      	ldr	r2, [pc, #224]	@ (8001e48 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	e004      	b.n	8001d80 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4a34      	ldr	r2, [pc, #208]	@ (8001e4c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001d80:	4b2e      	ldr	r3, [pc, #184]	@ (8001e3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d8c:	d102      	bne.n	8001d94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	61bb      	str	r3, [r7, #24]
      break;
 8001d92:	e04a      	b.n	8001e2a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4a2d      	ldr	r2, [pc, #180]	@ (8001e50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	61bb      	str	r3, [r7, #24]
      break;
 8001da2:	e042      	b.n	8001e2a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001da4:	4b25      	ldr	r3, [pc, #148]	@ (8001e3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001db0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001db4:	d108      	bne.n	8001dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001dc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	e01f      	b.n	8001e08 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dd2:	d109      	bne.n	8001de8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001dd4:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001de0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	e00f      	b.n	8001e08 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001df2:	d11c      	bne.n	8001e2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d016      	beq.n	8001e2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001e00:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8001e04:	61bb      	str	r3, [r7, #24]
      break;
 8001e06:	e012      	b.n	8001e2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001e08:	e011      	b.n	8001e2e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001e0a:	f7ff fe85 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	0b9b      	lsrs	r3, r3, #14
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	61bb      	str	r3, [r7, #24]
      break;
 8001e24:	e004      	b.n	8001e30 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001e26:	bf00      	nop
 8001e28:	e002      	b.n	8001e30 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001e2a:	bf00      	nop
 8001e2c:	e000      	b.n	8001e30 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001e2e:	bf00      	nop
    }
  }
  return (frequency);
 8001e30:	69bb      	ldr	r3, [r7, #24]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	080031a0 	.word	0x080031a0
 8001e44:	080031b0 	.word	0x080031b0
 8001e48:	007a1200 	.word	0x007a1200
 8001e4c:	003d0900 	.word	0x003d0900
 8001e50:	aaaaaaab 	.word	0xaaaaaaab

08001e54 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e07a      	b.n	8001f60 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7c5b      	ldrb	r3, [r3, #17]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7fe fb80 	bl	8000580 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f9be 	bl	8002208 <HAL_RTC_WaitForSynchro>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2204      	movs	r2, #4
 8001e96:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e061      	b.n	8001f60 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 fa77 	bl	8002390 <RTC_EnterInitMode>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d004      	beq.n	8001eb2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2204      	movs	r2, #4
 8001eac:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e056      	b.n	8001f60 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0207 	bic.w	r2, r2, #7
 8001ec0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001eca:	4b27      	ldr	r3, [pc, #156]	@ (8001f68 <HAL_RTC_Init+0x114>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	4a26      	ldr	r2, [pc, #152]	@ (8001f68 <HAL_RTC_Init+0x114>)
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001ed6:	4b24      	ldr	r3, [pc, #144]	@ (8001f68 <HAL_RTC_Init+0x114>)
 8001ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eda:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	4921      	ldr	r1, [pc, #132]	@ (8001f68 <HAL_RTC_Init+0x114>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ef0:	d003      	beq.n	8001efa <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	e00e      	b.n	8001f18 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f7ff fef4 	bl	8001ce8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f00:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d104      	bne.n	8001f12 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e026      	b.n	8001f60 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	0c1a      	lsrs	r2, r3, #16
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f002 020f 	and.w	r2, r2, #15
 8001f24:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fa55 	bl	80023e0 <RTC_ExitInitMode>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2204      	movs	r2, #4
 8001f40:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00c      	b.n	8001f60 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
  }
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40006c00 	.word	0x40006c00

08001f6c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <HAL_RTC_SetTime+0x20>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e080      	b.n	8002092 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	7c1b      	ldrb	r3, [r3, #16]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_RTC_SetTime+0x30>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e07a      	b.n	8002092 <HAL_RTC_SetTime+0x126>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d113      	bne.n	8001fd6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8001fb8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	785b      	ldrb	r3, [r3, #1]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	1a5b      	subs	r3, r3, r1
 8001fc8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001fca:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001fd0:	4413      	add	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	e01e      	b.n	8002014 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fa28 	bl	8002430 <RTC_Bcd2ToByte>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8001fe8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	785b      	ldrb	r3, [r3, #1]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fa1d 	bl	8002430 <RTC_Bcd2ToByte>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	1a9b      	subs	r3, r3, r2
 8002000:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002002:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	789b      	ldrb	r3, [r3, #2]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 fa11 	bl	8002430 <RTC_Bcd2ToByte>
 800200e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002010:	4423      	add	r3, r4
 8002012:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002014:	6979      	ldr	r1, [r7, #20]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 f953 	bl	80022c2 <RTC_WriteTimeCounter>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2204      	movs	r2, #4
 8002026:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e02f      	b.n	8002092 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0205 	bic.w	r2, r2, #5
 8002040:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 f964 	bl	8002310 <RTC_ReadAlarmCounter>
 8002048:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002050:	d018      	beq.n	8002084 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	429a      	cmp	r2, r3
 8002058:	d214      	bcs.n	8002084 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8002060:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002064:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002066:	6939      	ldr	r1, [r7, #16]
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f96a 	bl	8002342 <RTC_WriteAlarmCounter>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2204      	movs	r2, #4
 8002078:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e006      	b.n	8002092 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002090:	2300      	movs	r3, #0
  }
}
 8002092:	4618      	mov	r0, r3
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	bd90      	pop	{r4, r7, pc}
	...

0800209c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <HAL_RTC_SetDate+0x24>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e097      	b.n	80021f4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	7c1b      	ldrb	r3, [r3, #16]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_RTC_SetDate+0x34>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e091      	b.n	80021f4 <HAL_RTC_SetDate+0x158>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2202      	movs	r2, #2
 80020da:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10c      	bne.n	80020fc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	78da      	ldrb	r2, [r3, #3]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	785a      	ldrb	r2, [r3, #1]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	789a      	ldrb	r2, [r3, #2]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	739a      	strb	r2, [r3, #14]
 80020fa:	e01a      	b.n	8002132 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	78db      	ldrb	r3, [r3, #3]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f995 	bl	8002430 <RTC_Bcd2ToByte>
 8002106:	4603      	mov	r3, r0
 8002108:	461a      	mov	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f98c 	bl	8002430 <RTC_Bcd2ToByte>
 8002118:	4603      	mov	r3, r0
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	789b      	ldrb	r3, [r3, #2]
 8002124:	4618      	mov	r0, r3
 8002126:	f000 f983 	bl	8002430 <RTC_Bcd2ToByte>
 800212a:	4603      	mov	r3, r0
 800212c:	461a      	mov	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	7bdb      	ldrb	r3, [r3, #15]
 8002136:	4618      	mov	r0, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	7b59      	ldrb	r1, [r3, #13]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	7b9b      	ldrb	r3, [r3, #14]
 8002140:	461a      	mov	r2, r3
 8002142:	f000 f993 	bl	800246c <RTC_WeekDayNum>
 8002146:	4603      	mov	r3, r0
 8002148:	461a      	mov	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	7b1a      	ldrb	r2, [r3, #12]
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f883 	bl	8002262 <RTC_ReadTimeCounter>
 800215c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	4a26      	ldr	r2, [pc, #152]	@ (80021fc <HAL_RTC_SetDate+0x160>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	0adb      	lsrs	r3, r3, #11
 8002168:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b18      	cmp	r3, #24
 800216e:	d93a      	bls.n	80021e6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	4a23      	ldr	r2, [pc, #140]	@ (8002200 <HAL_RTC_SetDate+0x164>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	4a22      	ldr	r2, [pc, #136]	@ (8002204 <HAL_RTC_SetDate+0x168>)
 800217c:	fb02 f303 	mul.w	r3, r2, r3
 8002180:	69fa      	ldr	r2, [r7, #28]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002186:	69f9      	ldr	r1, [r7, #28]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f89a 	bl	80022c2 <RTC_WriteTimeCounter>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2204      	movs	r2, #4
 8002198:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e027      	b.n	80021f4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f8b3 	bl	8002310 <RTC_ReadAlarmCounter>
 80021aa:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021b2:	d018      	beq.n	80021e6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d214      	bcs.n	80021e6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80021c2:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80021c6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80021c8:	69b9      	ldr	r1, [r7, #24]
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f8b9 	bl	8002342 <RTC_WriteAlarmCounter>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2204      	movs	r2, #4
 80021da:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e006      	b.n	80021f4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2201      	movs	r2, #1
 80021ea:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	91a2b3c5 	.word	0x91a2b3c5
 8002200:	aaaaaaab 	.word	0xaaaaaaab
 8002204:	00015180 	.word	0x00015180

08002208 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e01d      	b.n	800225a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0208 	bic.w	r2, r2, #8
 800222c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800222e:	f7fe fb11 	bl	8000854 <HAL_GetTick>
 8002232:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002234:	e009      	b.n	800224a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002236:	f7fe fb0d 	bl	8000854 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002244:	d901      	bls.n	800224a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e007      	b.n	800225a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ee      	beq.n	8002236 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002262:	b480      	push	{r7}
 8002264:	b087      	sub	sp, #28
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	827b      	strh	r3, [r7, #18]
 800226e:	2300      	movs	r3, #0
 8002270:	823b      	strh	r3, [r7, #16]
 8002272:	2300      	movs	r3, #0
 8002274:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002292:	8a7a      	ldrh	r2, [r7, #18]
 8002294:	8a3b      	ldrh	r3, [r7, #16]
 8002296:	429a      	cmp	r2, r3
 8002298:	d008      	beq.n	80022ac <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800229a:	8a3b      	ldrh	r3, [r7, #16]
 800229c:	041a      	lsls	r2, r3, #16
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	4313      	orrs	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e004      	b.n	80022b6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80022ac:	8a7b      	ldrh	r3, [r7, #18]
 80022ae:	041a      	lsls	r2, r3, #16
 80022b0:	89fb      	ldrh	r3, [r7, #14]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80022b6:	697b      	ldr	r3, [r7, #20]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr

080022c2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b084      	sub	sp, #16
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f85d 	bl	8002390 <RTC_EnterInitMode>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	e011      	b.n	8002306 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	0c12      	lsrs	r2, r2, #16
 80022ea:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	b292      	uxth	r2, r2
 80022f4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f872 	bl	80023e0 <RTC_ExitInitMode>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002306:	7bfb      	ldrb	r3, [r7, #15]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	81fb      	strh	r3, [r7, #14]
 800231c:	2300      	movs	r3, #0
 800231e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002330:	89fb      	ldrh	r3, [r7, #14]
 8002332:	041a      	lsls	r2, r3, #16
 8002334:	89bb      	ldrh	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f81d 	bl	8002390 <RTC_EnterInitMode>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	e011      	b.n	8002386 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	0c12      	lsrs	r2, r2, #16
 800236a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	b292      	uxth	r2, r2
 8002374:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f832 	bl	80023e0 <RTC_ExitInitMode>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002386:	7bfb      	ldrb	r3, [r7, #15]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800239c:	f7fe fa5a 	bl	8000854 <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80023a2:	e009      	b.n	80023b8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80023a4:	f7fe fa56 	bl	8000854 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023b2:	d901      	bls.n	80023b8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e00f      	b.n	80023d8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0ee      	beq.n	80023a4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0210 	orr.w	r2, r2, #16
 80023d4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0210 	bic.w	r2, r2, #16
 80023fa:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80023fc:	f7fe fa2a 	bl	8000854 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002402:	e009      	b.n	8002418 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002404:	f7fe fa26 	bl	8000854 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002412:	d901      	bls.n	8002418 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e007      	b.n	8002428 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0ee      	beq.n	8002404 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	b2db      	uxtb	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	b2da      	uxtb	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4413      	add	r3, r2
 800245e:	b2db      	uxtb	r3, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
	...

0800246c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	70fb      	strb	r3, [r7, #3]
 8002478:	4613      	mov	r3, r2
 800247a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800248a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d82d      	bhi.n	80024ee <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	4613      	mov	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	4a2c      	ldr	r2, [pc, #176]	@ (8002550 <RTC_WeekDayNum+0xe4>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	085a      	lsrs	r2, r3, #1
 80024a6:	78bb      	ldrb	r3, [r7, #2]
 80024a8:	441a      	add	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	441a      	add	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	441a      	add	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	4926      	ldr	r1, [pc, #152]	@ (8002554 <RTC_WeekDayNum+0xe8>)
 80024bc:	fba1 1303 	umull	r1, r3, r1, r3
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	1ad2      	subs	r2, r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	4922      	ldr	r1, [pc, #136]	@ (8002554 <RTC_WeekDayNum+0xe8>)
 80024ca:	fba1 1303 	umull	r1, r3, r1, r3
 80024ce:	09db      	lsrs	r3, r3, #7
 80024d0:	4413      	add	r3, r2
 80024d2:	1d1a      	adds	r2, r3, #4
 80024d4:	4b20      	ldr	r3, [pc, #128]	@ (8002558 <RTC_WeekDayNum+0xec>)
 80024d6:	fba3 1302 	umull	r1, r3, r3, r2
 80024da:	1ad1      	subs	r1, r2, r3
 80024dc:	0849      	lsrs	r1, r1, #1
 80024de:	440b      	add	r3, r1
 80024e0:	0899      	lsrs	r1, r3, #2
 80024e2:	460b      	mov	r3, r1
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	1a5b      	subs	r3, r3, r1
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	e029      	b.n	8002542 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80024ee:	78fa      	ldrb	r2, [r7, #3]
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	4a15      	ldr	r2, [pc, #84]	@ (8002550 <RTC_WeekDayNum+0xe4>)
 80024fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002500:	085a      	lsrs	r2, r3, #1
 8002502:	78bb      	ldrb	r3, [r7, #2]
 8002504:	441a      	add	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	441a      	add	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	441a      	add	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4910      	ldr	r1, [pc, #64]	@ (8002554 <RTC_WeekDayNum+0xe8>)
 8002514:	fba1 1303 	umull	r1, r3, r1, r3
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	1ad2      	subs	r2, r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	490d      	ldr	r1, [pc, #52]	@ (8002554 <RTC_WeekDayNum+0xe8>)
 8002520:	fba1 1303 	umull	r1, r3, r1, r3
 8002524:	09db      	lsrs	r3, r3, #7
 8002526:	4413      	add	r3, r2
 8002528:	1c9a      	adds	r2, r3, #2
 800252a:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <RTC_WeekDayNum+0xec>)
 800252c:	fba3 1302 	umull	r1, r3, r3, r2
 8002530:	1ad1      	subs	r1, r2, r3
 8002532:	0849      	lsrs	r1, r1, #1
 8002534:	440b      	add	r3, r1
 8002536:	0899      	lsrs	r1, r3, #2
 8002538:	460b      	mov	r3, r1
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	1a5b      	subs	r3, r3, r1
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	b2db      	uxtb	r3, r3
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	38e38e39 	.word	0x38e38e39
 8002554:	51eb851f 	.word	0x51eb851f
 8002558:	24924925 	.word	0x24924925

0800255c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e042      	b.n	80025f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe f820 	bl	80005c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2224      	movs	r2, #36	@ 0x24
 800258c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800259e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 fcd5 	bl	8002f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	4613      	mov	r3, r2
 8002608:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b20      	cmp	r3, #32
 8002614:	d112      	bne.n	800263c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_UART_Receive_IT+0x26>
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e00b      	b.n	800263e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	461a      	mov	r2, r3
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fab7 	bl	8002ba6 <UART_Start_Receive_IT>
 8002638:	4603      	mov	r3, r0
 800263a:	e000      	b.n	800263e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800263c:	2302      	movs	r3, #2
  }
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b0ba      	sub	sp, #232	@ 0xe8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800267a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10f      	bne.n	80026ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800268e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_UART_IRQHandler+0x66>
 800269a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fb93 	bl	8002dd2 <UART_Receive_IT>
      return;
 80026ac:	e25b      	b.n	8002b66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 80de 	beq.w	8002874 <HAL_UART_IRQHandler+0x22c>
 80026b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d106      	bne.n	80026d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80d1 	beq.w	8002874 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00b      	beq.n	80026f6 <HAL_UART_IRQHandler+0xae>
 80026de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_UART_IRQHandler+0xd2>
 8002702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002712:	f043 0202 	orr.w	r2, r3, #2
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800271a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <HAL_UART_IRQHandler+0xf6>
 8002726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002736:	f043 0204 	orr.w	r2, r3, #4
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800273e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d011      	beq.n	800276e <HAL_UART_IRQHandler+0x126>
 800274a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b00      	cmp	r3, #0
 8002754:	d105      	bne.n	8002762 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	f043 0208 	orr.w	r2, r3, #8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 81f2 	beq.w	8002b5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_UART_IRQHandler+0x14e>
 8002784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fb1e 	bl	8002dd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d103      	bne.n	80027c2 <HAL_UART_IRQHandler+0x17a>
 80027ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d04f      	beq.n	8002862 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fa28 	bl	8002c18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d041      	beq.n	800285a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3314      	adds	r3, #20
 80027dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027e4:	e853 3f00 	ldrex	r3, [r3]
 80027e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80027ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3314      	adds	r3, #20
 80027fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002802:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800280e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002812:	e841 2300 	strex	r3, r2, [r1]
 8002816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800281a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1d9      	bne.n	80027d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002826:	2b00      	cmp	r3, #0
 8002828:	d013      	beq.n	8002852 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800282e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a28 <HAL_UART_IRQHandler+0x3e0>)
 8002830:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fb70 	bl	8000f1c <HAL_DMA_Abort_IT>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d016      	beq.n	8002870 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800284c:	4610      	mov	r0, r2
 800284e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002850:	e00e      	b.n	8002870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f993 	bl	8002b7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002858:	e00a      	b.n	8002870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f98f 	bl	8002b7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002860:	e006      	b.n	8002870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f98b 	bl	8002b7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800286e:	e175      	b.n	8002b5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002870:	bf00      	nop
    return;
 8002872:	e173      	b.n	8002b5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002878:	2b01      	cmp	r3, #1
 800287a:	f040 814f 	bne.w	8002b1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800287e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8148 	beq.w	8002b1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800288c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 8141 	beq.w	8002b1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80b6 	beq.w	8002a2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 8145 	beq.w	8002b60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028de:	429a      	cmp	r2, r3
 80028e0:	f080 813e 	bcs.w	8002b60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	f000 8088 	beq.w	8002a08 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	330c      	adds	r3, #12
 80028fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002902:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002906:	e853 3f00 	ldrex	r3, [r3]
 800290a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800290e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002912:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002916:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002924:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002928:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002930:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002934:	e841 2300 	strex	r3, r2, [r1]
 8002938:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800293c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1d9      	bne.n	80028f8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3314      	adds	r3, #20
 800294a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800294e:	e853 3f00 	ldrex	r3, [r3]
 8002952:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002954:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002956:	f023 0301 	bic.w	r3, r3, #1
 800295a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	3314      	adds	r3, #20
 8002964:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002968:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800296c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002970:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002974:	e841 2300 	strex	r3, r2, [r1]
 8002978:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800297a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1e1      	bne.n	8002944 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3314      	adds	r3, #20
 8002986:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002988:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800298a:	e853 3f00 	ldrex	r3, [r3]
 800298e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002990:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002992:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002996:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	3314      	adds	r3, #20
 80029a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80029a4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80029aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029ac:	e841 2300 	strex	r3, r2, [r1]
 80029b0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80029b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1e3      	bne.n	8002980 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	330c      	adds	r3, #12
 80029cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029d0:	e853 3f00 	ldrex	r3, [r3]
 80029d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80029d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029d8:	f023 0310 	bic.w	r3, r3, #16
 80029dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	330c      	adds	r3, #12
 80029e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80029ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80029ec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029f2:	e841 2300 	strex	r3, r2, [r1]
 80029f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80029f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1e3      	bne.n	80029c6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe fa4f 	bl	8000ea6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f8b6 	bl	8002b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a24:	e09c      	b.n	8002b60 <HAL_UART_IRQHandler+0x518>
 8002a26:	bf00      	nop
 8002a28:	08002cdd 	.word	0x08002cdd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 808e 	beq.w	8002b64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8089 	beq.w	8002b64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	330c      	adds	r3, #12
 8002a58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a5c:	e853 3f00 	ldrex	r3, [r3]
 8002a60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	330c      	adds	r3, #12
 8002a72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002a76:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a7e:	e841 2300 	strex	r3, r2, [r1]
 8002a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1e3      	bne.n	8002a52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	3314      	adds	r3, #20
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	e853 3f00 	ldrex	r3, [r3]
 8002a98:	623b      	str	r3, [r7, #32]
   return(result);
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3314      	adds	r3, #20
 8002aaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002aae:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ab6:	e841 2300 	strex	r3, r2, [r1]
 8002aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1e3      	bne.n	8002a8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	e853 3f00 	ldrex	r3, [r3]
 8002ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0310 	bic.w	r3, r3, #16
 8002ae6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	330c      	adds	r3, #12
 8002af0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002af4:	61fa      	str	r2, [r7, #28]
 8002af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af8:	69b9      	ldr	r1, [r7, #24]
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	e841 2300 	strex	r3, r2, [r1]
 8002b00:	617b      	str	r3, [r7, #20]
   return(result);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1e3      	bne.n	8002ad0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b12:	4619      	mov	r1, r3
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f83b 	bl	8002b90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b1a:	e023      	b.n	8002b64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d009      	beq.n	8002b3c <HAL_UART_IRQHandler+0x4f4>
 8002b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f8e5 	bl	8002d04 <UART_Transmit_IT>
    return;
 8002b3a:	e014      	b.n	8002b66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00e      	beq.n	8002b66 <HAL_UART_IRQHandler+0x51e>
 8002b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f924 	bl	8002da2 <UART_EndTransmit_IT>
    return;
 8002b5a:	e004      	b.n	8002b66 <HAL_UART_IRQHandler+0x51e>
    return;
 8002b5c:	bf00      	nop
 8002b5e:	e002      	b.n	8002b66 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b60:	bf00      	nop
 8002b62:	e000      	b.n	8002b66 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b64:	bf00      	nop
  }
}
 8002b66:	37e8      	adds	r7, #232	@ 0xe8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	88fa      	ldrh	r2, [r7, #6]
 8002bbe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2222      	movs	r2, #34	@ 0x22
 8002bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0220 	orr.w	r2, r2, #32
 8002c0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b095      	sub	sp, #84	@ 0x54
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	330c      	adds	r3, #12
 8002c26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c2a:	e853 3f00 	ldrex	r3, [r3]
 8002c2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	330c      	adds	r3, #12
 8002c3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c40:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c48:	e841 2300 	strex	r3, r2, [r1]
 8002c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1e5      	bne.n	8002c20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3314      	adds	r3, #20
 8002c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	e853 3f00 	ldrex	r3, [r3]
 8002c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3314      	adds	r3, #20
 8002c72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c7c:	e841 2300 	strex	r3, r2, [r1]
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e5      	bne.n	8002c54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d119      	bne.n	8002cc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	330c      	adds	r3, #12
 8002c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	e853 3f00 	ldrex	r3, [r3]
 8002c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f023 0310 	bic.w	r3, r3, #16
 8002ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	330c      	adds	r3, #12
 8002cae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cb0:	61ba      	str	r2, [r7, #24]
 8002cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb4:	6979      	ldr	r1, [r7, #20]
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	e841 2300 	strex	r3, r2, [r1]
 8002cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e5      	bne.n	8002c90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002cd2:	bf00      	nop
 8002cd4:	3754      	adds	r7, #84	@ 0x54
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff ff41 	bl	8002b7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b21      	cmp	r3, #33	@ 0x21
 8002d16:	d13e      	bne.n	8002d96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d20:	d114      	bne.n	8002d4c <UART_Transmit_IT+0x48>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d110      	bne.n	8002d4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	1c9a      	adds	r2, r3, #2
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	621a      	str	r2, [r3, #32]
 8002d4a:	e008      	b.n	8002d5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	1c59      	adds	r1, r3, #1
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6211      	str	r1, [r2, #32]
 8002d56:	781a      	ldrb	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10f      	bne.n	8002d92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e000      	b.n	8002d98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
  }
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002db8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff fed2 	bl	8002b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b08c      	sub	sp, #48	@ 0x30
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b22      	cmp	r3, #34	@ 0x22
 8002de4:	f040 80ae 	bne.w	8002f44 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002df0:	d117      	bne.n	8002e22 <UART_Receive_IT+0x50>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d113      	bne.n	8002e22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e02:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1a:	1c9a      	adds	r2, r3, #2
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e20:	e026      	b.n	8002e70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e34:	d007      	beq.n	8002e46 <UART_Receive_IT+0x74>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10a      	bne.n	8002e54 <UART_Receive_IT+0x82>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	e008      	b.n	8002e66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d15d      	bne.n	8002f40 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0220 	bic.w	r2, r2, #32
 8002e92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ea2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d135      	bne.n	8002f36 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	e853 3f00 	ldrex	r3, [r3]
 8002ede:	613b      	str	r3, [r7, #16]
   return(result);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f023 0310 	bic.w	r3, r3, #16
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	330c      	adds	r3, #12
 8002eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef0:	623a      	str	r2, [r7, #32]
 8002ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef4:	69f9      	ldr	r1, [r7, #28]
 8002ef6:	6a3a      	ldr	r2, [r7, #32]
 8002ef8:	e841 2300 	strex	r3, r2, [r1]
 8002efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e5      	bne.n	8002ed0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d10a      	bne.n	8002f28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff fe2e 	bl	8002b90 <HAL_UARTEx_RxEventCallback>
 8002f34:	e002      	b.n	8002f3c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f898 	bl	800306c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e002      	b.n	8002f46 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e000      	b.n	8002f46 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002f44:	2302      	movs	r3, #2
  }
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3730      	adds	r7, #48	@ 0x30
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002f8a:	f023 030c 	bic.w	r3, r3, #12
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8003064 <UART_SetConfig+0x114>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d103      	bne.n	8002fc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fb8:	f7fe fdae 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	e002      	b.n	8002fc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fc0:	f7fe fd96 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 8002fc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	009a      	lsls	r2, r3, #2
 8002fd0:	441a      	add	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	4a22      	ldr	r2, [pc, #136]	@ (8003068 <UART_SetConfig+0x118>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	0119      	lsls	r1, r3, #4
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	009a      	lsls	r2, r3, #2
 8002ff0:	441a      	add	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8003068 <UART_SetConfig+0x118>)
 8002ffe:	fba3 0302 	umull	r0, r3, r3, r2
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	2064      	movs	r0, #100	@ 0x64
 8003006:	fb00 f303 	mul.w	r3, r0, r3
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	3332      	adds	r3, #50	@ 0x32
 8003010:	4a15      	ldr	r2, [pc, #84]	@ (8003068 <UART_SetConfig+0x118>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800301c:	4419      	add	r1, r3
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	009a      	lsls	r2, r3, #2
 8003028:	441a      	add	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	fbb2 f2f3 	udiv	r2, r2, r3
 8003034:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <UART_SetConfig+0x118>)
 8003036:	fba3 0302 	umull	r0, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	2064      	movs	r0, #100	@ 0x64
 800303e:	fb00 f303 	mul.w	r3, r0, r3
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	3332      	adds	r3, #50	@ 0x32
 8003048:	4a07      	ldr	r2, [pc, #28]	@ (8003068 <UART_SetConfig+0x118>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	f003 020f 	and.w	r2, r3, #15
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	440a      	add	r2, r1
 800305a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40013800 	.word	0x40013800
 8003068:	51eb851f 	.word	0x51eb851f

0800306c <HAL_UART_RxCpltCallback>:
    uart->isInitialized = 1;
    return 0; // Khởi tạo thành công
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a08      	ldr	r2, [pc, #32]	@ (800309c <HAL_UART_RxCpltCallback+0x30>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10a      	bne.n	8003094 <HAL_UART_RxCpltCallback+0x28>
	  CircularBuffer_Write(&rxBuffer, rxbyte);
 800307e:	4b08      	ldr	r3, [pc, #32]	@ (80030a0 <HAL_UART_RxCpltCallback+0x34>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	4619      	mov	r1, r3
 8003084:	4807      	ldr	r0, [pc, #28]	@ (80030a4 <HAL_UART_RxCpltCallback+0x38>)
 8003086:	f000 f811 	bl	80030ac <CircularBuffer_Write>
	  HAL_UART_Receive_IT(&uart1.huart, &rxbyte, 1);
 800308a:	2201      	movs	r2, #1
 800308c:	4904      	ldr	r1, [pc, #16]	@ (80030a0 <HAL_UART_RxCpltCallback+0x34>)
 800308e:	4806      	ldr	r0, [pc, #24]	@ (80030a8 <HAL_UART_RxCpltCallback+0x3c>)
 8003090:	f7ff fab4 	bl	80025fc <HAL_UART_Receive_IT>
  }
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40013800 	.word	0x40013800
 80030a0:	2000015c 	.word	0x2000015c
 80030a4:	20000160 	.word	0x20000160
 80030a8:	2000000c 	.word	0x2000000c

080030ac <CircularBuffer_Write>:
 *      Author: tdat
 */

#include "circularbf.h"

int CircularBuffer_Write(CircularBuffer *cb, uint8_t data) {
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (cb->head + 1) % BUFFER_SIZE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	425a      	negs	r2, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	bf58      	it	pl
 80030ca:	4253      	negpl	r3, r2
 80030cc:	81fb      	strh	r3, [r7, #14]
    if (next == cb->tail) {
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	89fa      	ldrh	r2, [r7, #14]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d101      	bne.n	80030e0 <CircularBuffer_Write+0x34>
            return 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	e00c      	b.n	80030fa <CircularBuffer_Write+0x4e>
    } else {
            cb->buffer[cb->head] = data;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	4619      	mov	r1, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	545a      	strb	r2, [r3, r1]
            cb->head = next;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	89fa      	ldrh	r2, [r7, #14]
 80030f4:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
            return 1;
 80030f8:	2301      	movs	r3, #1
    }
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <memset>:
 8003104:	4603      	mov	r3, r0
 8003106:	4402      	add	r2, r0
 8003108:	4293      	cmp	r3, r2
 800310a:	d100      	bne.n	800310e <memset+0xa>
 800310c:	4770      	bx	lr
 800310e:	f803 1b01 	strb.w	r1, [r3], #1
 8003112:	e7f9      	b.n	8003108 <memset+0x4>

08003114 <__libc_init_array>:
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	2600      	movs	r6, #0
 8003118:	4d0c      	ldr	r5, [pc, #48]	@ (800314c <__libc_init_array+0x38>)
 800311a:	4c0d      	ldr	r4, [pc, #52]	@ (8003150 <__libc_init_array+0x3c>)
 800311c:	1b64      	subs	r4, r4, r5
 800311e:	10a4      	asrs	r4, r4, #2
 8003120:	42a6      	cmp	r6, r4
 8003122:	d109      	bne.n	8003138 <__libc_init_array+0x24>
 8003124:	f000 f81a 	bl	800315c <_init>
 8003128:	2600      	movs	r6, #0
 800312a:	4d0a      	ldr	r5, [pc, #40]	@ (8003154 <__libc_init_array+0x40>)
 800312c:	4c0a      	ldr	r4, [pc, #40]	@ (8003158 <__libc_init_array+0x44>)
 800312e:	1b64      	subs	r4, r4, r5
 8003130:	10a4      	asrs	r4, r4, #2
 8003132:	42a6      	cmp	r6, r4
 8003134:	d105      	bne.n	8003142 <__libc_init_array+0x2e>
 8003136:	bd70      	pop	{r4, r5, r6, pc}
 8003138:	f855 3b04 	ldr.w	r3, [r5], #4
 800313c:	4798      	blx	r3
 800313e:	3601      	adds	r6, #1
 8003140:	e7ee      	b.n	8003120 <__libc_init_array+0xc>
 8003142:	f855 3b04 	ldr.w	r3, [r5], #4
 8003146:	4798      	blx	r3
 8003148:	3601      	adds	r6, #1
 800314a:	e7f2      	b.n	8003132 <__libc_init_array+0x1e>
 800314c:	080031b4 	.word	0x080031b4
 8003150:	080031b4 	.word	0x080031b4
 8003154:	080031b4 	.word	0x080031b4
 8003158:	080031b8 	.word	0x080031b8

0800315c <_init>:
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315e:	bf00      	nop
 8003160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003162:	bc08      	pop	{r3}
 8003164:	469e      	mov	lr, r3
 8003166:	4770      	bx	lr

08003168 <_fini>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	bf00      	nop
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr
